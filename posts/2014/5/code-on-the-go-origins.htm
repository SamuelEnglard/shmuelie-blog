
        <p>Before I delve into version 2.0 I thought I would start with explaining the 1.x versions, what I did right and of course what I did wrong.</p>
        <p>Version 1.0 was a very simple app, meaning it had nothing over the competition. Like some of my competitors I was using the CodeMirror library as the core to the app. CodeMirror is an HTML based code editor that offers Syntax Highlighting, Undo/Redo,Â  VERY basic Auto Complete, Code Folding, and more. I added tabs which most of the competitors did not do but the two competitors I was afraid of did. (And no I am not telling you who they are, I want to keep you using Code on the Go after all).</p>
        <p>Besides CodeMirror the only other library I used was Esprima. Esprima is a library that analyzes JavaScript creating an AST (if you do not know what an AST is just think of it as a representation of your code as objects). At first Esprima was used to create a slightly better auto complete. In short it worked by keeping track of where in the code you were and where variables were declared. By comparing the two it would guess the variable and then if the variable had a primitive value (String, Number, or Boolean) it would show auto complete for that type. The second use for Esprima was to find code errors (things that just simply are invalid code and will not parse) and show them to the user.</p>
        <p>Both Esprima and CodeMirror are still used in Code on the Go. Code Mirror is used as the &ldquo;console&rdquo; in the debug view. Esprima is used for the same things, Auto Complete and error finding, though how it is actually done is completely different.</p>
        <p>The primary reason for not using CodeMirror in 2.0 as the main editor was that I could not easily hack it. Most of the things I wanted to hack have been added or fixed since then but it was too late.</p>
        <p>Now 2.0 was a complete rewrite from 1.x. There is ZERO code that was kept from 1.x (unless you count code inside Esprima). The reason for this is that the code was simply bad. While it was pretty inventive, it was hacked together at first and it showed. User interface (UI) code was rewritten because if I was honest with myself the original UI was simply terrible. It was not even remotely touch friendly, it had way too much unused white space, and some things just didn&rsquo;t look polished.</p>
        <p>Now that we know where Code on the Go 2.0 came from we can start looking at it. Next post I will go through why I chose what libraries I did and how they fit together.</p>
      