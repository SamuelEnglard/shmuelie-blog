<p>When talking with <a href="http://www.twitter.com/dotnetnelson" target="_blank">Nelson Carrillo</a> about my <a href="http://bgtechrants.blogspot.com/2012/08/emptycollection.html" target="_blank">EmptyCollection</a> he brought up an interesting point:<br /></p><blockquote class="twitter-tweet" data-in-reply-to="241211095824613377"><a href="https://twitter.com/shmuelie" target="_blank"><s>@</s><b>shmuelie</b></a> thats interesting, I just usually return null when there are no items. Also interesting is perf impact of newing up collections<br />— Nelson Carrillo (@dotnetnelson) <a data-datetime="2012-08-30T16:38:42+00:00" href="https://twitter.com/dotnetnelson/status/241213365945528320" target="_blank">August 30, 2012</a></blockquote><script charset="utf-8" src="//platform.twitter.com/widgets.js"></script> And it got me thinking, why not just return null. After all its way better than creating a new collection for sure. But then I thought about how the .NET Framework does things. When you call a method that returns collections (like <a href="http://msdn.microsoft.com/en-us/library/07wt70x2.aspx" target="_blank">System.IO.Directory.GetFiles(String)</a>) or filters a collection (<a href="http://msdn.microsoft.com/en-us/library/bb397926.aspx" target="_blank">LINQ</a> in general) you don’t get back null, you get back something that’s at least enumerable that contains no items. <br /><br />This is useful because instead of storing the result in a local variable, checking if it is not null, and only then looping through the contents (whether using a for or foreach) you can just go right into looping (which for a foreach is really great, since you can even skip the local variable to store the collection in).<br /><br />Now, I do think that returning null when you have nothing to return is a good idea, but only when you’re returning one item (like <a href="http://msdn.microsoft.com/en-us/library/0ebtbkkc.aspx" target="_blank">System.Collections.Generic.List<t>.Item</t></a>). Otherwise I think I’ll sacrifice the performance gain for following .NET conventions.<br /><br />