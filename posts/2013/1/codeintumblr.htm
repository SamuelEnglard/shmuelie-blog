
        <p>Being a programmer I like to post code. Sadly the way I use to do it doesn&rsquo;t really work in Tumblr (go to <a href="http://blog.englard.net/post/39359637726/fiddler-scripts-black-white-list-sites" target="_blank">http://blog.englard.net/post/39359637726/fiddler-scripts-black-white-list-sites</a> to see what happens). So like a good geek I made my own :)</p>
        <p>The system is based off of CodeMirror, a great HTML base code editor. To use it you first open you Tumblr&rsquo;s customization controls. Then under the theme you select &ldquo;Edit HTML&rdquo;. At the very bottom of the page add the following JavaScript:</p>
        <p><code class="text/javascript">(function () <br />{ <br /> CodeMirror = {}; <br /><br /> function splitLines(string) { return string.split(/\r?\x0A|\r/); }; <br /><br /> function StringStream(string) <br /> { <br /> this.pos = this.start = 0; <br /> this.string = string; <br /> } <br /> StringStream.prototype = { <br /> eol: function () { return this.pos &gt;= this.string.length; }, <br /> sol: function () { return this.pos == 0; }, <br /> peek: function () { return this.string.charAt(this.pos) || null; }, <br /> next: function () <br /> { <br /> if (this.pos &lt; this.string.length) <br /> return this.string.charAt(this.pos++); <br /> }, <br /> eat: function (match) <br /> { <br /> var ch = this.string.charAt(this.pos); <br /> if (typeof match == "string") var ok = ch == match; <br /> else var ok = ch &amp;&amp; (match.test ? match.test(ch) : match(ch)); <br /> if (ok) { ++this.pos; return ch; } <br /> }, <br /> eatWhile: function (match) <br /> { <br /> var start = this.pos; <br /> while (this.eat(match)) { } <br /> return this.pos &gt; start; <br /> }, <br /> eatSpace: function () <br /> { <br /> var start = this.pos; <br /> while (/[\s\u00a0]/.test(this.string.charAt(this.pos)))++this.pos; <br /> return this.pos &gt; start; <br /> }, <br /> skipToEnd: function () { this.pos = this.string.length; }, <br /> skipTo: function (ch) <br /> { <br /> var found = this.string.indexOf(ch, this.pos); <br /> if (found &gt; -1) { this.pos = found; return true; } <br /> }, <br /> backUp: function (n) { this.pos -= n; }, <br /> column: function () { return this.start; }, <br /> indentation: function () { return 0; }, <br /> match: function (pattern, consume, caseInsensitive) <br /> { <br /> if (typeof pattern == "string") <br /> { <br /> function cased(str) { return caseInsensitive ? str.toLowerCase() : str; } <br /> if (cased(this.string).indexOf(cased(pattern), this.pos) == this.pos) <br /> { <br /> if (consume !== false) this.pos += pattern.length; <br /> return true; <br /> } <br /> } <br /> else <br /> { <br /> var match = this.string.slice(this.pos).match(pattern); <br /> if (match &amp;&amp; consume !== false) this.pos += match[0].length; <br /> return match; <br /> } <br /> }, <br /> current: function () { return this.string.slice(this.start, this.pos); } <br /> }; <br /> CodeMirror.StringStream = StringStream; <br /><br /> CodeMirror.startState = function (mode, a1, a2) <br /> { <br /> return mode.startState ? mode.startState(a1, a2) : true; <br /> }; <br /><br /> var modes = CodeMirror.modes = {}, mimeModes = CodeMirror.mimeModes = {}; <br /> CodeMirror.defineMode = function (name, mode) { modes[name] = mode; }; <br /> CodeMirror.defineMIME = function (mime, spec) { mimeModes[mime] = spec; }; <br /> CodeMirror.getMode = function (options, spec) <br /> { <br /> if (typeof spec == "string" &amp;&amp; mimeModes.hasOwnProperty(spec)) <br /> spec = mimeModes[spec]; <br /> if (typeof spec == "string") <br /> var mname = spec, config = {}; <br /> else if (spec != null) <br /> var mname = spec.name, config = spec; <br /> var mfactory = modes[mname]; <br /> if (!mfactory) throw new Error("Unknown mode: " + spec); <br /> return mfactory(options, config || {}); <br /> }; <br /><br /> CodeMirror.runMode = function (string, modespec, callback, options) <br /> { <br /> var mode = CodeMirror.getMode({ indentUnit: 2 }, modespec); <br /><br /> if (callback.nodeType == 1) <br /> { <br /> var tabSize = (options &amp;&amp; options.tabSize) || 4; <br /> var node = callback, col = 0, lineNumber = 0; <br /> node.innerHTML = ""; <br /> callback = function (text, style, lineIndex) <br /> { <br /> if (col == 0) <br /> { <br /> lineNumber++; <br /> node.appendChild(document.createTextNode(lineNumber + ".\t")); <br /> } <br /> if (text == "\x0A") <br /> { <br /> node.appendChild(document.createElement("br")); <br /> col = 0; <br /> return; <br /> } <br /> var content = ""; <br /> // replace tabs <br /> for (var pos = 0; ;) <br /> { <br /> var idx = text.indexOf(" ", pos); <br /> if (idx == -1) <br /> { <br /> content += text.slice(pos); <br /> col += text.length - pos; <br /> break; <br /> } else <br /> { <br /> col += idx - pos; <br /> content += text.slice(pos, idx); <br /> var size = tabSize - col % tabSize; <br /> col += size; <br /> for (var i = 0; i &lt; size; ++i) content += " "; <br /> pos = idx + 1; <br /> } <br /> } <br /><br /> if (style) <br /> { <br /> var sp = node.appendChild(document.createElement("span")); <br /> sp.className = "cm-" + style.replace(/ +/g, " cm-"); <br /> sp.appendChild(document.createTextNode(content)); <br /> } else <br /> { <br /> node.appendChild(document.createTextNode(content)); <br /> } <br /> }; <br /> } <br /><br /> var lines = splitLines(string), state = CodeMirror.startState(mode); <br /> for (var i = 0, e = lines.length; i &lt; e; ++i) <br /> { <br /> if (i) callback("\x0A"); <br /> var stream = new CodeMirror.StringStream(lines[i]); <br /> while (!stream.eol()) <br /> { <br /> var style = mode.token(stream, state); <br /> callback(stream.current(), style, i, stream.start); <br /> stream.start = stream.pos; <br /> } <br /> } <br /> }; <br /><br /> // INSERT MODES <br /> // INSERT MODES <br /> // INSERT MODES <br /> // INSERT MODES <br /> // INSERT MODES <br /><br /> var codeAreas = document.getElementsByTagName("code"); <br /> while(codeAreas.length &gt; 0) <br /> { <br /> var codeArea = codeAreas[0]; <br /> var text = codeArea.innerHTML.replace(/\&lt;br\s?\/?\&gt;/g, "\x0A").replace(/\x26;gt;/g, "&gt;").replace(/\x26amp;lt;/g, "&lt;").replace(/\x26amp;/g, "&amp;"); var mode = codeArea.className; <br /> var newCodeArea = document.createElement("pre"); <br /> newCodeArea.className = "cm-s-default"; <br /> codeArea.parentNode.replaceChild(newCodeArea, codeArea); <br /> CodeMirror.runMode(text, mode, newCodeArea); <br /> } <br />}());</code></p>
        <p>Next you have to visit <a href="http://codemirror.net/" target="_blank">http://codemirror.net/</a> and download the source code. The reason is that the above code can only format code that you include the &ldquo;codemirror mode&rdquo; for. CodeMirror Modes are JavaScript that breaks the code up in to it&rsquo;s parts, like keywords and string, based on the language. Now take what ever modes you want and copy their JavaScript into the area I have commented with &ldquo;INSERT MODES&rdquo;. Now save the changes so we can get into how to add code to your posts!</p>
        <p>To add code to your posts you have to click the HTML edit button for the post. In there we will add your code, but first it needs to be modified so that Tumblr will leave it in a state that the above code can process. First replace all new lines with &ldquo;&lt;br&gt;&rdquo; (yes the HTML new line). Sadly that&rsquo;s needed because Tumblr will strip the new lines from your code. Now when you post the modified code in to the HTML editor surround it with a paragraph tag and a code tag (&lt;p&gt;&lt;code&gt;YOUR CODE&lt;/code&gt;&lt;p&gt;) the paragraph tag is mandated by Tumblr and the code tag is how the highlighter finds code to convert. Finally set the class attribute of the code tag to the mode you want (text/javascript for example).</p>
        <p>Sadly the requirement for &ldquo;&lt;br&gt;&rdquo; to make the code Tumblr safe means that if you want to use this with HTML that HTML cannot have &ldquo;&lt;br&gt;&rdquo; or &ldquo;&lt;br /&gt;&rdquo; in it. I am working on a fix and will post it once I have it.</p>
        <p>(And yes this post uses this trick!)</p>
        <p><strong>UPDATE:</strong> realized I forgot to include the CSS to color the styled code!:</p>
        <p><code class="text/css">.cm-s-default .cm-keyword {color: #708;} <br />.cm-s-default .cm-atom {color: #219;} <br />.cm-s-default .cm-number {color: #164;} <br />.cm-s-default .cm-def {color: #00f;} <br />.cm-s-default .cm-variable {color: black;} <br />.cm-s-default .cm-variable-2 {color: #05a;} <br />.cm-s-default .cm-variable-3 {color: #085;} <br />.cm-s-default .cm-property {color: black;} <br />.cm-s-default .cm-operator {color: black;} <br />.cm-s-default .cm-comment {color: #a50;} <br />.cm-s-default .cm-string {color: #a11;} <br />.cm-s-default .cm-string-2 {color: #f50;} <br />.cm-s-default .cm-meta {color: #555;} <br />.cm-s-default .cm-error {color: #f00;} <br />.cm-s-default .cm-qualifier {color: #555;} <br />.cm-s-default .cm-builtin {color: #30a;} <br />.cm-s-default .cm-bracket {color: #997;} <br />.cm-s-default .cm-tag {color: #170;} <br />.cm-s-default .cm-attribute {color: #00c;} <br />.cm-s-default .cm-header {color: blue;} <br />.cm-s-default .cm-quote {color: #090;} <br />.cm-s-default .cm-hr {color: #999;} <br />.cm-s-default .cm-link {color: #00c;} <br /><br />.cm-negative {color: #d44;} <br />.cm-positive {color: #292;} <br />.cm-header, .cm-strong {font-weight: bold;} <br />.cm-em {font-style: italic;} <br />.cm-emstrong {font-style: italic; font-weight: bold;} <br />.cm-link {text-decoration: underline;} <br /><br />.cm-invalidchar {color: #f00;} <br />.cm-searching { <br /> background: #ffa; <br /> background: rgba(255, 255, 0, .4); <br />}</code></p>
        <p>(Yes it can do CSS to, in fact any mode that works with CodeMirror)</p>
      