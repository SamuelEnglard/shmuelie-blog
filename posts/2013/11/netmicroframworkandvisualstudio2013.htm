
        <p>For those of you that have been following my blog you know that I have a love for the <a href="http://agentwatches.com/" target="_blank">AGENT SmartWatch</a>. I have been working on apps for it as well as a &ldquo;port&rdquo; of <a href="http://monogame.net/" target="_blank">MonoGame</a> for it.</p>
        <p>Recently I reinstalled Windows 8.1 as a completely fresh install. I decided that I would use this to finally switch from Visual Studio 2012 to 2013. While I&rsquo;m loving 2013 so far I ran into one problem. The most recent <a href="http://www.netmf.com/" target="_blank">.NET Micro Framework</a> installer is only for 2012. Since the AGENT SmartWatch uses the .NET Micro Framework as it&rsquo;s &ldquo;platform&rdquo; without it I could not do any development. Being a nerd and a geek I couldn&rsquo;t accept this and decided that I&rsquo;d try to make it work. Luckily I did and hopefully this will work for you too.</p>
        <p><strong>Before we can get to the fun &ldquo;hacking&rdquo; part, first some disclaimers. What I am doing is NOT supported by Microsoft, Secret Labs, the .NET Micro Framework team, the Visual Studio team, or myself. If something breaks from following the instruction I&rsquo;m giving you can comment, but I not obligated to and may not have an answer. As a follow up to that following the instructions CAN break stuff, even if followed exactly. Also please not that this fix DOES NOT add the new project templates correctly.</strong> If you are ok with all that then please continue on reading and let the fun begin.</p>
        <p>First problem was that the installer would do a check for Visual Studio 2012 and if it was not installed would throw an error message and not run. Luckily the .NET Micro Framework is open source, including the installer. After looking through the files I eventually came across the <a href="http://netmf.codeplex.com/SourceControl/latest#client_v4_3/setup/Include/devenv_setup.wxs" target="_blank">file</a> that contains the logic for detecting Visual Studio 2012. All it does is look for the &ldquo;InstallDir&rdquo; value in the &ldquo;HKLM\SOFTWARE\Microsoft\VisualStudio\11.0" key (on 64 bit systems it looks in "HKLM\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\11.0"). If it finds the value it assumes 2012 is installed, otherwise it assumes it is not. Solving this issues is as simple as just creating the key and value. The "InstallDir&rdquo; value is a string value that points to the Install directory of that version of Visual Studio. Since we are trying to trick the installer set the value as the location of Visual Studio 2013.</p>
        <p>Now you can run the .NET Micro Framework installer. File wise everything works correctly since it uses the location from the registry to put files in Visual Studio that it needs to. unfortunately the same cannot be said of the registry, though it is fairly easy to fix.</p>
        <p>Navigate back to &ldquo;HKLM\SOFTWARE\Microsoft\VisualStudio\11.0" key (on 64 bit systems "HKLM\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\11.0"). Under the "11.0&rdquo; key you will notice a lot of keys and values. What you need to do is find the keys that are for the .NET Micro Framework integration and copy them to the &ldquo;12.0&rdquo; key (the numbers 11.0 and 12.0 are the internal version numbers of 2012 and 2013 respectively). If you use RegEdit like there is sadly no copy ability. A trick I used to overcome that was to export the key I wanted to copy to a .REG file. Once it was exported I would edit the file, which is really just a simple text file. I would replace all the references to &ldquo;11.0&rdquo; with &ldquo;12.0&rdquo;, save the file, and then open it.</p>
        <p>Once you&rsquo;ve moved them all there is only one step left. While we have set everything up correctly, we need to tell Visual Studio to &ldquo;load&rdquo; the changes. To do this you simply run Visual Studio with the &ldquo;setup&rdquo; flag. On my machine that looked like</p>
        <blockquote>
        <p>&ldquo;C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE\devenv.exe&rdquo; /setup</p>
        </blockquote>
        <p>It may take a while to run so keep an eye on it from Task Manager. Once it finishes though you should be able to open existing .NET Micro Framework projects.</p>
      