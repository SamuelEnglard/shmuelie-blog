
        <p>In .NET Cross-Platform usually means across the Windows/Microsoft ecosystem: Desktop/Xbox/Phone/Compact/Micro/RT. Conventionally a developer did this by using linked files and compilation flags. Linked Files are a feature of Visual Studio that allows a developer to include a file in a project but not copy the file. Its kind of likeÂ creating a shortcut for files in Windows.</p>
        <p>The newer way that is growing popularity is the use of Portable Class Libraries (PCLs). PCLs use a technology in .NET called <a href="http://www.irisclasson.com/2013/07/24/stupid-question-222-what-is-type-forwarding-in-c/" target="_blank">type forwarding</a> to allow developers to create assemblies that target more than one profile at a time. The idea is a lot nicer than using Linked Files since you only need to compile once and yet you can reference it from each platform.</p>
        <p>Primary downside though is that PCLs work only with the lowest common denominator for the platforms you want to use. This means that the more platforms you add the less classes are available to use. It also means that any code that is never common is never available.</p>
        <p>Its that last point that hits the most for me because to me Cross-Platform with .NET means using Mono to target OSX and eventually iOS as well as Android. In these cases PCLs fall down really fast leaving me with only Linked Files and compilation flags. Would long term I&rsquo;d like to use type forwarding to make PCLs maybe work but for now I&rsquo;m suck.</p>
        <p>Being unconventional has its down sides :)</p>
      