<p>At Build 2015 Microsoft brought hundreds of HoloLens to demo in order to let developers get a feel for how it works. HoloLens is Microsoft's device to bring the digital world into &quot;reality&quot;. The device shown was supposed to be close to the retail version with release date rumored for September. Many people have given their opinion on the feel and usage of the device, with some on the development cycle we were shown, as limited as it was.</p>
<p>I will expand on that development system to give a better picture of what to expect from HoloLens from a developer position. I will be: looking at Microsoft PR, talking to the HoloLens team, and speculating on potential uses.</p>
<p>For starters, HoloLens will run any Universal Application. These applications are developed to be sold from the Windows Store; and they will work on all Windows 10 devices—including HoloLens. &quot;Modern&quot; Office, games, RDP, and so many other Universal Applications will just work, no modification needed. They will be able to follow you around in constant point of vision or be pinned to a location so that they are always there. You could for example pin a recipe application to a location in the kitchen while wanting the Skype application to follow you around. If the application makes a sound it will automatically sound like it is coming from the location of the application, pinned or not. This requires no extra work on the part of the developer. Such apps will be written in C++/C#/VB/XAML and HTML/CSS/JS.</p>
<p>The cooler applications though will be those that look 3D. Examples range from the simple weather application Microsoft has shown, to driving a 3D car that &quot;drives&quot; over the terrain of the real world. These applications are more what people think of when they think &quot;Holograms&quot;. These applications are still Universal Applications. What makes them unique is that they use Direct3D instead of Direct2D (used by XAML and HTML/CSS). Instead of rendering a 3D world on to a 2D space these applications are rendered in 3D in &quot;3D&quot;. There are special objects that must be used so that they are rendered as &quot;holograms&quot; instead of 2D but they are very simple and don’t change how the developer creates the 3D world.</p>
<p>In the developer demo that Microsoft did at Build 2015 the 3D development was done using Unity, though developers can use Direct3D directly from C++. It can also be used in C# via SharpDX or any technology that use Direct3D under the hood. The only limitation is that the technology must provide a way to &quot;inject&quot; the HoloLens objects. Currently this programing model does limit &quot;holograms&quot; to those who can build 3D models in programs like Maya or don't mind using object built for others. In the future though the hologram effect will be programmable from XAML in some manner making the entry barrier much lower.</p>
<p>The final three parts to &quot;holograms&quot; are handled by HoloLens for the developer with minimal work. 3D sound gives the API a sound file and telling it where to play the audio from. HoloLens does the math to make it &quot;3D&quot;. The speech command API is very simple: give it a phrase and an event is fired when that phrase is said. Gestures are elegantly handled by the system as well. The developer can ask to be alerted to gesture &quot;A&quot; and the API will do so.</p>
<p>One of the big fears of HoloLens was that the API would be hard to develop for a C++ complex application requiring advanced knowledge to understand. In fact the opposite is true. The API is incredibly easy to understand and developers should find making HoloLens applications very easy.</p>